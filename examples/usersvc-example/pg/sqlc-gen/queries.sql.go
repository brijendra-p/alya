// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package sqlc

import (
	"context"
	"database/sql"
)

const checkUsernameExists = `-- name: CheckUsernameExists :one
SELECT EXISTS(
    SELECT 1 FROM users WHERE username = $1
) AS exists
`

func (q *Queries) CheckUsernameExists(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkUsernameExists, username)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    name,
    email,
    username,
    created_at,
    updated_at,
    phone_number
) VALUES (
    $1, $2, $3, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, $4
) RETURNING id
`

type CreateUserParams struct {
	Name        string         `json:"name"`
	Email       string         `json:"email"`
	Username    string         `json:"username"`
	PhoneNumber sql.NullString `json:"phone_number"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Username,
		arg.PhoneNumber,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
